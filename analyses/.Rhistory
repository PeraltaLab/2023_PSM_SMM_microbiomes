all.equal(rownames(design_SMM), rownames(otu_SMM))
#RELATIVE ABUNDANCE
otu_rel_PSM <- otu_PSM
for(i in 1:dim(otu_final)[1]){
otu_rel[i,] <- otu_final[i,]/sum(otu_final[i,])
}
#RELATIVE ABUNDANCE
otu_rel_PSM <- otu_PSM
otu_rel_PSMl[i,] <- otu_PSM[i,]/sum(otu_PSM[i,])
#RELATIVE ABUNDANCE
otu_rel_PSM <- otu_PSM
for(i in 1:dim(otu_final)[1]){
otu_rel_PSMl[i,] <- otu_PSM[i,]/sum(otu_PSM[i,])
}
#RELATIVE ABUNDANCE
otu_rel_PSM <- otu_PSM
for(i in 1:dim(otu_final)[1]){
otu_rel_PSM[i,] <- otu_PSM[i,]/sum(otu_PSM[i,])
}
otu_rel_PSM <- otu_PSM
for(i in 1:dim(otu_final)[1]){
otu_rel_PSM[i,] <- otu_PSM[i,]/sum(otu_PSM[i,])
}
for(i in 1:dim(otu_PSM)[1]){
otu_rel_PSM[i,] <- otu_PSM[i,]/sum(otu_PSM[i,])
}
otu_rel_SMM <- otu_SMM
for(i in 1:dim(otu_SMM)[1]){
otu_rel_SMM[i,] <- otu_SMM[i,]/sum(otu_SMM[i,])
}
min(rowSums(otu_SMM)) #21176
otus.r <- rrarefy(otu_SMM, 21176)
# Fisher's Alpha
fisher <- fisher.alpha(otus.r)
# Species Richness
richness <- rowSums((otu_SMM >= 1))
# Shannon Diversity
shannon <- diversity(otus.r, "shannon")
# Simpson's Evenness
simp.even <- apply(otus.r, 1, simp_even)
#Pielouâ€™s evenness
J <- shannon/log(specnumber(otus.r[,-c(1:1)]))
diversity_SMM <- cbind(design_SMM,richness,shannon,simp.even,J)
str(diversity_SMM)
dim(diversity_SMM) #53 15
str(diversity_SMM)
levels(diversity_SMM$Date2)
# Graphing Shannon diversity
p <- ggplot(diversity_SMM, aes(x=TRT_row, y=shannon, color=TRT_row, shape=Source)) +
geom_point(aes(color=TRT_row), size=3, position = position_jitterdodge())
p1 <- p +facet_wrap(~Date2)
shannon <- p1 + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line
=element_line(colour = "black")) +
theme(axis.title=element_text(vjust=1,size=14,face="bold"),
axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5,
size=14), panel.border = element_rect(colour = "black",size=1)) +
theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Row location (decreasing elevation)", y = "Shannon Diversity Index (H')") +
theme(strip.text.x = element_text(size=14, face="bold"), strip.text.y =
element_text(size=14, face="bold"), strip.background = element_rect(colour="black",
fill="white", size=1)) + theme(axis.text.x = element_text(angle = )) +
labs(color = "Row location", shape = "Source")
#ggtitle("bacterial diversity - bulk sediment") +
#theme(plot.title = element_text(face = "italic")) +
#theme(legend.position = "none")
shannon
ggsave("../figures/SMM.shannon.png", plot=last_plot(), device=NULL, path=NULL, scale=1, width=7, height=5, dpi=300, limitsize=TRUE)
# Graphing evenness
p <- ggplot(diversity_SMM, aes(x=TRT_row, y=J, color=TRT_row, shape=Source)) +
geom_point(aes(color=TRT_row), size=3, position = position_jitterdodge())
p1 <- p +facet_wrap(~Date2)
evenness <- p1 + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line
=element_line(colour = "black")) +
theme(axis.title=element_text(vjust=1,size=14,face="bold"),
axis.text=element_text(size=14), axis.text.x = element_text(vjust=0.65, hjust=0.5,
size=14), panel.border = element_rect(colour = "black",size=1)) +
theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Row location (decreasing elevation)", y = "Pielou's Evenness (J')") +
theme(strip.text.x = element_text(size=14, face="bold"), strip.text.y =
element_text(size=14, face="bold"), strip.background = element_rect(colour="black",
fill="white", size=1)) + theme(axis.text.x = element_text(angle = )) +
labs(color = "Row location", shape = "Source")
evenness
ggsave("../figures/SMM.evenness.png", plot=last_plot(), device=NULL, path=NULL, scale=1, width=7, height=5, dpi=300, limitsize=TRUE)
otu_design_SMM <- cbind(design_SMM,otu_SMM)
dim(otu_design_SMM) #53 38981
dim(design_SMM) #53 11
adonis_SMM = adonis2(otu_design_SMM[,-c(1:11)]~TRT_row*Source, method = "bray", data = otu_design_SMM, perm=10000, set.seed=42)
adonis_SMM
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
SMM_BC <- vegdist(otu_design_SMM[,-c(1:11)], method="bray")
pcoa_SMM <- cmdscale(SMM_BC, k=2, eig=TRUE, add=TRUE) # changing k to 2 because we only want 2 dimensions anyway
explainvar1b_SMM <- round(pcoa_SMM$eig[1] / sum(pcoa_SMM$eig), 3) * 100
explainvar2b_SMM <- round(pcoa_SMM$eig[2] / sum(pcoa_SMM$eig), 3) * 100
sum.eigb <- sum(explainvar1b_SMM, explainvar2b_SMM)
explainvar1b_SMM # 30.9
explainvar2b_SMM # 10.4
# Principal Coordinates Analysis
pcoa.groups <- paste(otu_design_SMM$TRT_row, otu_design_SMM$Source, sep = "_")
pcoa.points <- data.frame(pcoa_SMM$points, group = pcoa.groups)
# Calculate Centroids (mean and SE)
pcoa.L.centroids <- melt(pcoa.points, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids <- acast(pcoa.L.centroids, variable ~ group, mean)
pcoa.centroids.se <- acast(pcoa.L.centroids, variable ~ group, se)
pcoa.centroids.sd <- acast(pcoa.L.centroids, variable ~ group, sd)
# Combine
pcoa.cent.dataframe <- cbind(t(pcoa.centroids), t(pcoa.centroids.se))
colnames(pcoa.cent.dataframe) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats <- rownames(pcoa.cent.dataframe)
pcoa.cent.treats <- as.data.frame(pcoa.cent.treats)
row <- c("1","1","2","2","3","3","4","4","5","5","6","6","7","7","8","8","9","9")
source <- c("bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz")
pcoa.cent.dataframe.trts <- as.data.frame(pcoa.cent.dataframe)
pcoa.cent.dataframe.trts$row <- as.factor(row)
pcoa.cent.dataframe.trts$source <- as.factor(source)
pcoa.cent.dataframe.trts <- cbind(pcoa.cent.treats,row,source)
#Plot
df1a <- as.data.frame(pcoa.cent.dataframe.trts)
plot1a <- ggplot(df1a, aes(x=V1, y=V2, colour=row, shape = source)) + theme_bw()
plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
geom_point(aes(colour=row), size=5, stroke = 1.25, show.legend = TRUE) +
scale_shape_manual(labels = c("bulk","rhizosphere"), values = c(16,17)) +
theme(axis.title = element_text(size=14),
axis.text = element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size = 1.25)) +
theme(axis.ticks.length = unit(0.3, "cm")) +
xlab("PCoA 1 (30.9%)") + ylab("PCoA 2 (10.4%)") +
labs(colour = "Row location", shape = "Source") +
guides(colour = guide_legend(override.aes = list(pch=16, size = 4)),
shape = guide_legend(override.aes = list(size = 4))) +
ggtitle("Bacterial 16SrRNA Community Composition")
pcoa.cent.dataframe.trts <- cbind(pcoa.cent.dataframe.trts,row,source)
#Plot
df1a <- as.data.frame(pcoa.cent.dataframe.trts)
plot1a <- ggplot(df1a, aes(x=V1, y=V2, colour=row, shape = source)) + theme_bw()
plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
geom_point(aes(colour=row), size=5, stroke = 1.25, show.legend = TRUE) +
scale_shape_manual(labels = c("bulk","rhizosphere"), values = c(16,17)) +
theme(axis.title = element_text(size=14),
axis.text = element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size = 1.25)) +
theme(axis.ticks.length = unit(0.3, "cm")) +
xlab("PCoA 1 (30.9%)") + ylab("PCoA 2 (10.4%)") +
labs(colour = "Row location", shape = "Source") +
guides(colour = guide_legend(override.aes = list(pch=16, size = 4)),
shape = guide_legend(override.aes = list(size = 4))) +
ggtitle("Bacterial 16SrRNA Community Composition")
View(pcoa.cent.dataframe.trts)
View(pcoa.L.centroids)
View(pcoa.points)
View(pcoa.cent.dataframe.trts)
View(otu_design_SMM)
# Calculate Centroids (mean and SE)
pcoa.L.centroids <- melt(pcoa.points, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids <- acast(pcoa.L.centroids, variable ~ group, mean)
pcoa.centroids.se <- acast(pcoa.L.centroids, variable ~ group, se)
pcoa.centroids.sd <- acast(pcoa.L.centroids, variable ~ group, sd)
View(pcoa.points)
# Combine
pcoa.cent.dataframe <- cbind(t(pcoa.centroids), t(pcoa.centroids.se))
View(pcoa.L.centroids)
# Classical (Metric) Multidimensional Scaling; returns PCoA coordinates
# eig=TRUE returns eigenvalues; k = # of dimensions to calculate
SMM_BC <- vegdist(otu_design_SMM[,-c(1:11)], method="bray")
pcoa_SMM <- cmdscale(SMM_BC, k=2, eig=TRUE, add=TRUE) # changing k to 2 because we only want 2 dimensions anyway
explainvar1b_SMM <- round(pcoa_SMM$eig[1] / sum(pcoa_SMM$eig), 3) * 100
explainvar2b_SMM <- round(pcoa_SMM$eig[2] / sum(pcoa_SMM$eig), 3) * 100
sum.eigb <- sum(explainvar1b_SMM, explainvar2b_SMM)
explainvar1b_SMM # 30.9
explainvar2b_SMM # 10.4
# Principal Coordinates Analysis
pcoa.groups <- paste(otu_design_SMM$TRT_row, otu_design_SMM$Source, sep = "_")
pcoa.points <- data.frame(pcoa_SMM$points, group = pcoa.groups)
# Calculate Centroids (mean and SE)
pcoa.L.centroids <- melt(pcoa.points, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids <- acast(pcoa.L.centroids, variable ~ group, mean)
pcoa.centroids.se <- acast(pcoa.L.centroids, variable ~ group, se)
pcoa.centroids.sd <- acast(pcoa.L.centroids, variable ~ group, sd)
# Combine
pcoa.cent.dataframe <- cbind(t(pcoa.centroids), t(pcoa.centroids.se))
View(pcoa.cent.dataframe)
# Calculate Centroids (mean and SE)
pcoa.L.centroids <- melt(pcoa.points, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids <- acast(pcoa.L.centroids, variable ~ group, mean)
pcoa.centroids.se <- acast(pcoa.L.centroids, variable ~ group, se)
pcoa.centroids.sd <- acast(pcoa.L.centroids, variable ~ group, sd)
# Combine
pcoa.cent.dataframe <- cbind(t(pcoa.centroids), t(pcoa.centroids.se))
colnames(pcoa.cent.dataframe) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats <- rownames(pcoa.cent.dataframe)
View(pcoa.L.centroids)
pcoa.cent.treats <- as.data.frame(pcoa.cent.treats)
View(pcoa.cent.treats)
View(pcoa.centroids)
pcoa.groups <- paste(otu_design_SMM$TRT_row, otu_design_SMM$Source, sep = "_")
pcoa.points <- data.frame(pcoa_SMM$points, group = pcoa.groups)
# Calculate Centroids (mean and SE)
pcoa.L.centroids <- melt(pcoa.points, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids <- acast(pcoa.L.centroids, variable ~ group, mean)
pcoa.centroids.se <- acast(pcoa.L.centroids, variable ~ group, se)
pcoa.centroids.sd <- acast(pcoa.L.centroids, variable ~ group, sd)
# Combine
pcoa.cent.dataframe <- cbind(t(pcoa.centroids), t(pcoa.centroids.se))
colnames(pcoa.cent.dataframe) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats <- rownames(pcoa.cent.dataframe)
row <- c("1","1","2","2","3","3","4","4","5","5","6","6","7","7","8","8","9","9")
source <- c("bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz")
pcoa.cent.dataframe.trts <- as.data.frame(pcoa.cent.treats)
View(pcoa.cent.dataframe.trts)
# Combine
pcoa.cent.dataframe <- cbind(t(pcoa.centroids), t(pcoa.centroids.se))
colnames(pcoa.cent.dataframe) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats <- rownames(pcoa.cent.dataframe)
pcoa.cent.dataframe.trts <- as.data.frame(pcoa.cent.dataframe)
View(pcoa.cent.dataframe.trts)
pcoa.cent.dataframe.trts$row <- as.factor(row)
pcoa.cent.dataframe.trts$source <- as.factor(source)
df1a <- cbind(pcoa.cent.dataframe.trts,row,source)
View(df1a)
pcoa.cent.dataframe.trts <- as.data.frame(pcoa.cent.dataframe)
pcoa.cent.dataframe.trts$row <- as.factor(row)
pcoa.cent.dataframe.trts$source <- as.factor(source)
df1a <- pcoa.cent.dataframe.trts
View(df1a)
#Plot
plot1a <- ggplot(df1a, aes(x=V1, y=V2, colour=row, shape = source)) + theme_bw()
plot1a + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(panel.background = element_blank()) +
geom_errorbarh(aes(xmax=V1+V1e, xmin=V1-V1e, height=0.01), colour="black") +
geom_errorbar(aes(ymax=V2+V2e, ymin=V2-V2e, width=0.01), colour="black") +
geom_point(aes(colour=row), size=5, stroke = 1.25, show.legend = TRUE) +
scale_shape_manual(labels = c("bulk","rhizosphere"), values = c(16,17)) +
theme(axis.title = element_text(size=14),
axis.text = element_text(size=14),
axis.text.x = element_text(size=14),
panel.border = element_rect(colour = "black", size = 1.25)) +
theme(axis.ticks.length = unit(0.3, "cm")) +
xlab("PCoA 1 (30.9%)") + ylab("PCoA 2 (10.4%)") +
labs(colour = "Row location", shape = "Source") +
guides(colour = guide_legend(override.aes = list(pch=16, size = 4)),
shape = guide_legend(override.aes = list(size = 4))) +
ggtitle("Bacterial 16SrRNA Community Composition")
ggsave("../figures/SMM.bact.ordination.jpg", plot=last_plot(), device=NULL, path=NULL, scale=1, width=7, height=5, dpi=300, limitsize=TRUE)
pcoa_SMM.groups <- paste(otu_design_SMM$TRT_row, otu_design_SMM$Source, sep = "_")
pcoa_SMM.points <- data.frame(pcoa_SMM$points, group = pcoa_SMM.groups)
pcoa.SMM.cent.dataframe.trts <- as.data.frame(pcoa_SMM.points)
# Adding columns with the factors. H: hydrologic history
row <- c("1", "2","3","4","5","6","7","9","1", "2","3","4","5","6","7","8","9","1", "2","3","4","5","6","7","8","9","1", "2","3","4","5","6","7","8","9","1", "2","3","4","5","6","7","8","9","1", "2","3","4","5","6","7","8","9")
source <- c("bulk", "bulk","bulk","bulk","bulk","bulk","bulk","bulk","rhiz", "rhiz","rhiz","rhiz","rhiz","rhiz","rhiz","rhiz","rhiz","bulk", "bulk","bulk","bulk","bulk","bulk","bulk","bulk","bulk","rhiz", "rhiz","rhiz","rhiz","rhiz","rhiz","rhiz","rhiz","rhiz","bulk", "bulk","bulk","bulk","bulk","bulk","bulk","bulk","bulk","rhiz", "rhiz","rhiz","rhiz","rhiz","rhiz","rhiz","rhiz","rhiz")
pcoa_SMM_indiv <- cbind(pcoa.SMM.cent.dataframe.trts,row, source)
str(pcoa_SMM_indiv)
pcoa_SMM_indiv$row <- as.factor(pcoa_SMM_indiv$row)
pcoa_SMM_indiv$source <- as.factor(pcoa_SMM_indiv$source)
dim(pcoa_SMM_indiv)
df1a <- pcoa_SMM_indiv
str(df1a)
bact_SMM_indiv<- ggplot(df1a, aes(x=X1, y=X2, shape=source, colour=row)) +
geom_point(aes(shape = source, colour = row), stroke = 4) +
#removes gridlines from plot
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")) +
theme(axis.title = element_text(size=12),# face="bold"),
axis.text.x = element_text(size=14, color="black"),  axis.text.y = element_text(size=14, color="black"),
panel.border = element_rect(colour = "black", size=1.25)) +
#Set plot title text size
theme(plot.title=element_text(size=12)) +
#Set legend text size
theme(legend.text=element_text(size=10, face="bold"), legend.title = element_text(size=10, face="bold"))+
#Sets size of tick marks on axis
theme(axis.ticks.length=unit(0.3,"cm")) +
#Sets labels for plot title, axis titles, and legend headings
xlab("PCoA 1 (30.9%)") + ylab("PCoA 2 (10.4%)") +
labs(shape = "Source") +
labs(colour="Row location") +
guides(color = guide_legend(override.aes = list(size = 1))) +
ggtitle("Bacterial 16SrRNA Community Composition")
bact_SMM_indiv
ggsave("../figures/SMM.bact.indiv.ordination.jpg", plot=last_plot(), device=NULL, path=NULL, scale=1, width=7, height=5, dpi=300, limitsize=TRUE)
adonis_SMM = adonis2(otu_design_SMM[,-c(1:11)]~TRT_row*Source*Date2, method = "bray", data = otu_design_SMM, perm=10000, set.seed=42)
adonis_SMM
adonis_SMM = adonis2(otu_design_SMM[,-c(1:11)]~TRT_row**Date2, method = "bray", data = otu_design_SMM, perm=10000, set.seed=42)
adonis_SMM = adonis2(otu_design_SMM[,-c(1:11)]~TRT_row*Date2, method = "bray", data = otu_design_SMM, perm=10000, set.seed=42)
adonis_SMM
pcoa.groups <- paste(otu_design_SMM$TRT_row, otu_design_SMM$Source*Date2, sep = "_")
pcoa.groups <- paste(otu_design_SMM$TRT_row, otu_design_SMM$Source, otu_design_SMM$Date2,sep = "_")
pcoa.points <- data.frame(pcoa_SMM$points, group = pcoa.groups)
# Calculate Centroids (mean and SE)
pcoa.L.centroids <- melt(pcoa.points, id="group", measure.vars = c("X1", "X2"))
pcoa.centroids <- acast(pcoa.L.centroids, variable ~ group, mean)
pcoa.centroids.se <- acast(pcoa.L.centroids, variable ~ group, se)
pcoa.centroids.sd <- acast(pcoa.L.centroids, variable ~ group, sd)
# Combine
pcoa.cent.dataframe <- cbind(t(pcoa.centroids), t(pcoa.centroids.se))
View(pcoa.cent.dataframe.trts)
colnames(pcoa.cent.dataframe) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats <- rownames(pcoa.cent.dataframe)
View(pcoa.cent.dataframe.trts)
# Combine
pcoa.cent.dataframe <- cbind(t(pcoa.centroids), t(pcoa.centroids.se))
colnames(pcoa.cent.dataframe) <- c("V1", "V2", "V1e", "V2e")
pcoa.cent.treats <- rownames(pcoa.cent.dataframe)
row <- c("1","1","2","2","3","3","4","4","5","5","6","6","7","7","8","8","9","9")
source <- c("bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz")
date_source <- c("bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz","bulk","rhiz")
pcoa.cent.dataframe.trts <- as.data.frame(pcoa.cent.dataframe)
pcoa.cent.dataframe.trts
view(pcoa.cent.dataframe.trts)
install.packages(c("adegraphics", "adiv", "checkmate", "deldir", "DEoptimR", "deSolve", "EnvStats", "Formula", "geiger", "ggthemes", "greybox", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "insight", "interp", "jpeg", "lavaan", "lpSolve", "opdisDownsampling", "patchwork", "phylobase", "pracma", "rgl", "robustbase", "smooth", "statmod", "survey", "texreg", "viridis", "XML"))
install.packages(c("ade4", "agricolae", "ape", "askpass", "bbmle", "bdsmatrix", "BiocManager", "bit", "blob", "boot", "brew", "brio", "broom", "bslib", "cachem", "callr", "car", "class", "classInt", "cli", "cluster", "clusterGeneration", "coda", "codetools", "colorspace", "commonmark", "cowplot", "cpp11", "crayon", "credentials", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "devtools", "digest", "downlit", "dplyr", "dtplyr", "e1071", "ecodist", "emmeans", "eulerr", "evaluate", "expm", "fansi", "fastmap", "fastmatch", "fontawesome", "forcats", "foreign", "fs", "gap", "gap.datasets", "gargle", "GenSA", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "gh", "glmmTMB", "glue", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "jsonlite", "KernSmooth", "klaR", "knitr", "labdsv", "labeling", "labelled", "later", "lattice", "lifecycle", "lme4", "lubridate", "maps", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minpack.lm", "minqa", "modelr", "multcomp", "munsell", "mvtnorm", "nlme", "nnet", "openssl", "optimx", "pbkrtest", "phangorn", "phytools", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plotrix", "pls", "plyr", "png", "polyclip", "prettyunits", "processx", "profvis", "progress", "promises", "ps", "psych", "purrr", "quantreg", "questionr", "R.cache", "R.oo", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "roxygen2", "rpart", "rprojroot", "rstatix", "rstudioapi", "Rtsne", "rvest", "sandwich", "sass", "scales", "scatterplot3d", "shiny", "sourcetools", "sp", "spatial", "stringi", "stringr", "styler", "survival", "sys", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "TMB", "tzdb", "usethis", "utf8", "uuid", "vctrs", "vegan", "viridisLite", "vroom", "waldo", "whisker", "withr", "xfun", "xml2", "yaml", "zip", "zoo"), lib="/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library")
install.packages(c("adegraphics", "adiv", "checkmate", "deldir", "DEoptimR", "deSolve", "EnvStats", "Formula", "geiger", "ggthemes", "greybox", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "insight", "interp", "jpeg", "lavaan", "lpSolve", "opdisDownsampling", "patchwork", "phylobase", "pracma", "rgl", "robustbase", "smooth", "statmod", "survey", "texreg", "viridis", "XML"))
install.packages(c("adegraphics", "adiv", "checkmate", "deldir", "DEoptimR", "deSolve", "EnvStats", "Formula", "geiger", "ggthemes", "greybox", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "insight", "interp", "jpeg", "lavaan", "lpSolve", "opdisDownsampling", "patchwork", "phylobase", "pracma", "rgl", "robustbase", "smooth", "statmod", "survey", "texreg", "viridis", "XML"))
install.packages(c("adegraphics", "adiv", "checkmate", "deldir", "DEoptimR", "deSolve", "EnvStats", "Formula", "geiger", "ggthemes", "greybox", "Hmisc", "htmlTable", "htmltools", "htmlwidgets", "insight", "interp", "jpeg", "lavaan", "lpSolve", "opdisDownsampling", "patchwork", "phylobase", "pracma", "rgl", "robustbase", "smooth", "statmod", "survey", "texreg", "viridis", "XML"))
install.packages(c("ade4", "agricolae", "ape", "askpass", "bbmle", "bdsmatrix", "BiocManager", "bit", "blob", "boot", "brew", "brio", "broom", "bslib", "cachem", "callr", "car", "class", "classInt", "cli", "cluster", "clusterGeneration", "coda", "codetools", "colorspace", "commonmark", "cowplot", "cpp11", "crayon", "credentials", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "devtools", "digest", "downlit", "dplyr", "dtplyr", "e1071", "ecodist", "emmeans", "eulerr", "evaluate", "expm", "fansi", "fastmap", "fastmatch", "fontawesome", "forcats", "foreign", "fs", "gap", "gap.datasets", "gargle", "GenSA", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "ggsignif", "gh", "glmmTMB", "glue", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "jsonlite", "KernSmooth", "klaR", "knitr", "labdsv", "labeling", "labelled", "later", "lattice", "lifecycle", "lme4", "lubridate", "maps", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minpack.lm", "minqa", "modelr", "multcomp", "munsell", "mvtnorm", "nlme", "nnet", "openssl", "optimx", "pbkrtest", "phangorn", "phytools", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plotrix", "pls", "plyr", "png", "polyclip", "prettyunits", "processx", "profvis", "progress", "promises", "ps", "psych", "purrr", "quantreg", "questionr", "R.cache", "R.oo", "R.utils", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "roxygen2", "rpart", "rprojroot", "rstatix", "rstudioapi", "Rtsne", "rvest", "sandwich", "sass", "scales", "scatterplot3d", "shiny", "sourcetools", "sp", "spatial", "stringi", "stringr", "styler", "survival", "sys", "systemfonts", "testthat", "textshaping", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "TMB", "tzdb", "usethis", "utf8", "uuid", "vctrs", "vegan", "viridisLite", "vroom", "waldo", "whisker", "withr", "xfun", "xml2", "yaml", "zip", "zoo"), lib="/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library")
adonis_SMM_source = adonis2(otu_design_SMM[,-c(1:11)]~TRT_row*Source, method = "bray", data = otu_design_SMM, perm=10000, set.seed=42)
remove.packages("labdsv")
# Set working directory:
setwd("~/GitHub/2023_PSM_SMM_microbiomes/analyses")
#use to set global options for chunks e.g., echo and warning options will be applied to all chunks:
knitr::opts_chunk$set(echo = TRUE)
# Clear environment:
rm(list=ls())
# Set working directory:
setwd("~/GitHub/2023_PSM_SMM_microbiomes/analyses")
# Standard error (se) and confidence interval (ci):
se <- function(x, ...){sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))}
ci <- function(x, ...){1.96 * sd(x,na.rm = TRUE)}
# Code dependencies:
source("../bin/DiversityFunctions.R")
source("../bin/MothurTools.R")
require("vegan"); require("reshape"); require("ggplot2"): require("tidyr"); require("dplyr"); require("dbstats"); require("reshape2"); require("ggpubr"); require("glue"); require("tidyverse"); require("labdsv"); require("phyloseq")
file_path <- ("../data/PSM_SMM_design.csv")
design <- read.csv(file_path, row.names=1)
dim(design) #117  11
str(design)
#Convert chr to factors
design$Study <- as.factor(design$Study)
design$Microbe_TRT <- as.factor(design$Microbe_TRT)
design$Water_TRT <- as.factor(design$Water_TRT)
design$Date2 <- as.factor(design$Date2)
design$TRT_row <- as.factor(design$TRT_row)
design$Source <- as.factor(design$Source) # coded as categorical for bulk vs rhiz
str(design)
#READ IN OTU FILE
otu_file <-("../data/PSM_SMM.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.opti_mcc.shared")
otu <- read.otu(otu_file)
#READ IN TAXONOMY FILE
tax_file <- ("../data/PSM_SMM.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.opti_mcc.0.03.cons.taxonomy")
tax <- import_mothur(mothur_constaxonomy_file =  tax_file)
colnames(tax)=c("Domain","Phylum","Class", "Order","Family","Genus")
tax_df <- as.data.frame(tax)
otu.tax <- read.tax(taxonomy = "../data/PSM_SMM.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.opti_mcc.0.03.cons.taxonomy",
format = "rdp", tax.levels = 6, col.tax = 3)
tax_df <- as.data.frame(otu.tax)
dim(otu) #117 71805
# OTU table - remove otus w/ < 2 occurrences across all sites
otu.2 <- otu[, which(colSums(otu) > 2)]
dim(otu.2) #117 38970
# OTU table - remove otus w/ < 10 occurrences across all sites
otu.10 <- otu[, which(colSums(otu) > 10)]
dim(otu.10) #117 20446
# Correct Sample IDs and Subset File
#check number of seqs per sample
#otu_sample <- rowSums(otu.2)
otu_sample <- rowSums(otu.10)
otu_sample
# OTU table - removed low abundance samples
otu_keep <- otu.10[which(rowSums(otu.10) >= 10000), ] #removed temporarily PSM_65 b/c it represents low reads from autoclaved field soil; SMM_08 failed PCR
dim(otu_keep) #removed three samples
# OTU table - odd sites in bacterial composition data and remove in design file and remove positive control and remove all baseline samples
odd.sites <- c("Mock_Pos","PSM_65", "SMM_08", "PSM_61", "PSM_62","PSM_63", "PSM_64", "PSM_66", "PSM_67", "PSM_68")
otu_final <- otu_keep[setdiff(rownames(otu_keep), odd.sites), ]
design_final <- design[setdiff(rownames(design), odd.sites), ]
all.equal(rownames(design_final), rownames(otu_final))
dim(design_final) #107  11
design_PSM <- subset(design_final, Study == "PSM")
dim(design_PSM) #54 11
design_SMM <- subset(design_final, Study == "SMM")
dim(design_SMM) #53 11
otu_PSM <- otu_final[c(1:54),]
dim(otu_PSM) #54 20446
all.equal(rownames(design_PSM), rownames(otu_PSM))
otu_SMM <- otu_final[c(55:107),]
dim(otu_SMM) #53 20446
all.equal(rownames(design_SMM), rownames(otu_SMM))
#now that PSM and SMM are separated, we will apply removing rare OTUs that might have been missed
otu_PSM.10 <- otu_PSM[, which(colSums(otu_PSM) > 10)]
dim(otu_PSM.10) # 54 8331
otu_SMM.10 <- otu_SMM[, which(colSums(otu_SMM) > 10)]
dim(otu_SMM.10) # 53 14812
#RELATIVE ABUNDANCE
otu_rel_PSM <- otu_PSM.10
for(i in 1:dim(otu_PSM.10)[1]){
otu_rel_PSM[i,] <- otu_PSM.10[i,]/sum(otu_PSM.10[i,])
}
otu_rel_SMM <- otu_SMM.10
for(i in 1:dim(otu_SMM.10)[1]){
otu_rel_SMM[i,] <- otu_SMM.10[i,]/sum(otu_SMM.10[i,])
}
min(rowSums(otu_PSM.10)) #10941
otus.r <- rrarefy(otu_PSM.10, 10941)
# Fisher's Alpha
fisher <- fisher.alpha(otus.r)
# Species Richness
richness <- rowSums((otu_PSM.10 >= 1))
# Shannon Diversity
shannon <- diversity(otus.r, "shannon")
# Simpson's Evenness
simp.even <- apply(otus.r, 1, simp_even)
#Pielouâ€™s evenness
J <- shannon/log(specnumber(otus.r[,-c(1:1)]))
diversity_PSM <- cbind(design_PSM,richness,shannon,simp.even,J)
str(diversity_PSM)
dim(diversity_PSM) #54 15
str(diversity_PSM)
dim(diversity_PSM) #54 15
# Graphing Shannon diversity
micro.labs <- c("No Addition", "Autoclaved Inocula", "Added Inocula") #for facet labels
names(micro.labs) <- c("CONTROL", "Microbe_neg", "Microbe_pos")
p <- ggplot(diversity_PSM, aes(x=Water_TRT,y=shannon, color=Water_TRT)) +
geom_boxplot() +
geom_point(aes(color=Water_TRT), size=2, position = position_jitterdodge())+
scale_color_manual(name="Treatment",
values=c("#004AAD", "#FFBD59"))
p1=p+facet_wrap(~Microbe_TRT)+facet_grid(. ~Microbe_TRT, labeller = labeller(Microbe_TRT=micro.labs))
shannon_PSM<-p1 + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line
=element_line(colour = "black")) +
theme(axis.title=element_text(vjust=1,size=14,face="bold"),
axis.text=element_text(size=14), axis.text.x = element_text(vjust=1, hjust=1,
size=14), panel.border = element_rect(colour = "black",size=1)) +
theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Treatment", y = "Shannon Diversity Index (H')") +
theme(strip.text.x = element_text(size=14, face="bold"), strip.text.y =
element_text(size=14, face="bold"), strip.background = element_rect(colour="black",
fill="white", size=1)) + theme(axis.text.x = element_text(angle = , hjust = ))
#ggtitle("bacterial diversity - bulk sediment") +
#theme(plot.title = element_text(face = "italic")) +
#theme(legend.position = "none")
shannon_PSM
shannon_PSM<-p1 + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line
=element_line(colour = "black")) +
theme(axis.title=element_text(vjust=1,size=14,face="bold"),
axis.text=element_text(size=14), axis.text.x = element_text(vjust=1, hjust=1,
size=14), panel.border = element_rect(colour = "black",size=1)) +
theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Treatment", y = "Shannon Diversity Index (H')") +
theme(strip.text.x = element_text(size=14, face="bold"), strip.text.y =
element_text(size=12, face="bold"), strip.background = element_rect(colour="black",
fill="white", size=1)) + theme(axis.text.x = element_text(angle = , hjust = ))
shannon_PSM
shannon_PSM<-p1 + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line
=element_line(colour = "black")) +
theme(axis.title=element_text(vjust=1,size=14,face="bold"),
axis.text=element_text(size=14), axis.text.x = element_text(vjust=1, hjust=1,
size=14), panel.border = element_rect(colour = "black",size=1)) +
theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Treatment", y = "Shannon Diversity Index (H')") +
theme(strip.text.x = element_text(size=12, face="bold"), strip.text.y =
element_text(size=14, face="bold"), strip.background = element_rect(colour="black",
fill="white", size=1)) + theme(axis.text.x = element_text(angle = , hjust = ))
shannon_PSM
ggsave("../figures/PSM.shannon.png", plot=last_plot(), device=NULL, path=NULL, scale=1, width=7, height=5, dpi=300, limitsize=TRUE)
p <- ggplot(diversity_PSM, aes(x=Water_TRT,y=J, color=Water_TRT)) +
geom_boxplot() +
geom_point(aes(color=Water_TRT), size=2, position = position_jitterdodge())+
scale_color_manual(name="Treatment",
values=c("#004AAD", "#FFBD59"))
p1=p+facet_wrap(~Microbe_TRT)+facet_grid(. ~Microbe_TRT, labeller = labeller(Microbe_TRT=micro.labs))
evenness <- p1 + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line
=element_line(colour = "black")) +
theme(axis.title=element_text(vjust=1,size=14,face="bold"),
axis.text=element_text(size=14), axis.text.x = element_text(size=14), panel.border = element_rect(colour = "black",size=1)) +
theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Treatment", y = "Pielou's Evenness (J')") +
theme(strip.text.x = element_text(size=14, face="bold"), strip.text.y =
element_text(size=14, face="bold"), strip.background = element_rect(colour="black",
fill="white", size=1)) + theme(axis.text.x = element_text(angle = , hjust = )) +
labs(color = "Treatment")
evenness <- p1 + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line
=element_line(colour = "black")) +
theme(axis.title=element_text(vjust=1,size=14,face="bold"),
axis.text=element_text(size=14), axis.text.x = element_text(size=14), panel.border = element_rect(colour = "black",size=1)) +
theme(axis.ticks.length=unit(0.3,"cm")) + labs(x = "Treatment", y = "Pielou's Evenness (J')") +
theme(strip.text.x = element_text(size=12, face="bold"), strip.text.y =
element_text(size=14, face="bold"), strip.background = element_rect(colour="black",
fill="white", size=1)) + theme(axis.text.x = element_text(angle = , hjust = )) +
labs(color = "Treatment")
evenness
ggsave("../figures/PSM.evenness.png", plot=last_plot(), device=NULL, path=NULL, scale=1, width=7, height=5, dpi=300, limitsize=TRUE)
otu_design_PSM <- cbind(diversity_PSM,otu_rel_PSM)
dim(otu_design_PSM) #54 8346
dim(diversity_PSM) #54 15
adonis_PSM = adonis2(otu_design_PSM[,-c(1:15)]~Water_TRT*Microbe_TRT, method = "bray", data = otu_design_PSM, perm=10000, set.seed=42)
adonis_PSM
adonis_PSM = adonis2(otu_design_PSM[,-c(1:15)]~Water_TRT*Microbe_TRT, method = "bray", data = otu_design_PSM, perm=1000, set.seed=42)
adonis_PSM
